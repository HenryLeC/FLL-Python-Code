from typing import Callable, Iterable, Optional, Tuple, Union


class Device:
    def get(self, format: Optional[int]) -> list: ...
    def mode(self, mode: int) -> None: ...
    def mode(self, mode: int, data: bytes) -> None: ...
    def mode(self, mode: Iterable[Tuple[int, int]]) -> None: ...
    def mode(self) -> Iterable[Tuple[int, int]]: ...
    def pwm(self, value: int) -> None: ...
    def write_direct(self, data: bytes) -> None: ...

    FORMAT_RAW = 0
    FORMAT_PCT = 1
    FORMAT_SI = 2


class MotorPair:
    def id(self) -> int: ...
    def primary(self) -> Motor: ...
    def secondary(self) -> Motor: ...
    def unpair(self) -> bool: ...
    def float(self) -> None: ...
    def brake(self) -> None: ...
    def hold(self) -> None: ...
    def pwm(self, pwm_0: int, pwm_1: int) -> None: ...
    def run_at_speed(self, speed_0: int, speed_1: int) -> None: ...
    def run_at_speed(self, speed_0: int, speed_1: int, max_power: int,
                     acceleration: int, deceleration: int) -> None: ...

    def run_for_time(self, msec: int) -> None: ...
    def run_for_time(self, msec: int, speed_0: int, speed_1: int, max_power: int,
                     acceleration: int, deceleration: int, stop: int) -> None: ...

    def run_for_degrees(self, degrees: int) -> None: ...
    def run_for_degrees(self, degrees: int, speed_0: int, speed_1: int, max_power: int,
                        acceleration: int, deceleration: int, stop: int) -> None: ...

    def run_to_position(self, position_0: int, position_1: int) -> None: ...
    def run_to_position(self, position_0: int, position_1: int, speed: int,
                        max_power: int, acceleration: int, deceleration: int, stop: int) -> None: ...

    def preset(self, position_0: int, position_1: int) -> None: ...
    def callback(self, function: Callable[[int], None]) -> None: ...
    def pid(self, p: int, i: int, d: int) -> None: ...


class Motor(Device):
    def float(self) -> None: ...
    def brake(self) -> None: ...
    def hold(self) -> None: ...
    def busy(self, type=0) -> bool: ...
    def run_at_speed(self, speed: int) -> None: ...
    def run_at_speed(self, speed: int, max_power: int,
                     acceleration: int, deceleration: int, stall: bool) -> None: ...

    def run_for_time(self, msec: int) -> None: ...
    def run_for_time(self, msec: int, speed: int, max_power: int, stop: int,
                     acceleration: int, deceleration: int, stall: bool) -> None: ...

    def run_for_degrees(self, degrees: int) -> None: ...
    def run_for_degrees(self, degrees: int, speed: int, max_power: int, stop: int,
                        acceleration: int, deceleration: int, stall: bool) -> None: ...

    def run_to_position(self, position: int) -> None: ...
    def run_to_position(self, position: int, speed: int, max_power: int, stop: int,
                        acceleration: int, deceleration: int, stall: bool) -> None: ...

    def preset(self, position: int) -> None: ...
    def callback(self, function: Callable[[int], None]) -> None: ...
    def pid(self) -> tuple: ...
    def pid(self, p: int, i: int, d: int) -> None: ...
    def default(self) -> dict: ...
    def default(self, speed: int, max_power: int, acceleration: int, deceleration: int, stop: int,
                pid: tuple, stall: bool, callback: Optional[Callable[[int], None]]) -> None: ...

    def pair(self, other_motor: Motor) -> MotorPair: ...

    FORMAT_RAW = 0
    FORMAT_PCT = 1
    FORMAT_SI = 2

    BUSY_MODE = 0
    BUSY_MOTOR = 1
    STOP_FLOAT = 0
    STOP_BRAKE = 1
    STOP_HOLD = 2
    EVENT_COMPLETED = 0
    EVENT_INTERRUPTED = 1
    EVENT_STALLED = 2


class Pin:
    def direction(self, dicrection: Optional[int]) -> int: ...
    def value(self, value: Optional[int]) -> int: ...


class Port:
    # Permanent attributes
    def pwm(self, value: int) -> None: ...
    def callback(self, function: Callable[[int], None]) -> None: ...
    def mode(self, mode: int, baud_rate: int = 2400) -> None: ...

    # MODE_DEFAULT attributes
    device: Device
    motor: Motor
    def info(self) -> dict: ...

    # MODE_FULL_DUPLEX or MODE_HALF_DUPLEX attributes
    def baud(self, baud: int) -> None: ...
    def read(self, read: Union[int, any]) -> int: ...
    def write(self, write: bytes) -> int: ...

    # MODE_GPIO
    p5: Pin
    p6: Pin


A: Port
B: Port
C: Port
D: Port
E: Port
F: Port

DETACHED = 0
ATTACHED = 1

MODE_DEFAULT = 0
MODE_FULL_DUPLEX = 1
MODE_HALF_DUPLEX = 2
MODE_GPIO = 3
